blueprint:
  name: Managing a door contact
  domain: automation
  description:  "`- Version: 1.0 -`\n\n  # Managing a door contact\n
            In this project I try to exploit a sensor port for multiple uses.\n
            Automation is divided into two parts:\n 
            #### Turns on a light when the door is opened for a customizable time by following rules:\n
                  - Let it be after sunset\n
                  - You can insert switch and light\n
                  - The light is turned on/off only if the initial state was not on\n
                  - The light is turned off after a customizable time that starts from the moment the door is closed\n

            #### Receive an alert in case the door was left open for a customizable time:\n
                  - You can decide whether to enable push notification.\n
                  - You can decide whether to enable TTS notification.\n
                  - You can decide whether to enable Alexa notification.\n
                  - You can customize the text of the notification.\n
                  - You can opt out of receiving alerts by not enabling any of the notify services\n

            ## Requirements:\n

            In order to use the project:\n
            - The door sensor must be *device_class: door*.\n
            "

  input:
    light:
      name: Light
      description: Select the entity that should light up when you open the door
      selector:
        entity:
          #multiple: true
          domain: 
            - switch
            - light
    light_off:
      name: Delay to turn off the light
      description: Waiting time to turn off the light since the door is closed
      default: 30
      selector:
        number:
          min: 0
          max: 360
          unit_of_measurement: sec
          mode: slider
          step: 1
    door:
      name: Door
      description: Select the door sensor 
      selector:
        entity:
          domain: binary_sensor
          device_class: door
    time_door:
      name: Open door warning time
      description: Waiting time before receiving notice that the door has been left open
      default: 30
      selector:
        number:
          min: 0
          max: 360
          unit_of_measurement: sec
          mode: slider
          step: 1
    text_notify:
      name: Text noty
      description: "**Example of the text in Italian:** Porta d'ingresso dimentica aperta"
      default: false
      selector:
        text:
    push:
      name: "Notify push"
      description: Enable to receive push notification
      default: false
      selector:
        boolean:
    notify_device:
      name: Device to notify push
      description: Device needs to run the official Home Assistant app to receive notifications.
      default: false
      selector:
        device:
          integration: mobile_app
    tts:
      name: "Notify TTS announcement "
      description: "Enable to receive TTS notification"
      default: false
      selector:
        boolean:
    notify_tts:
      name: Speaker for notify TTS
      default: false
      description: "Insert at least one media_player. \n
                    **IMPORTANT** The tts service called by default is **tts.google_translate_say** "
      selector:
        entity:
          domain: media_player
          device_class: speaker
          multiple: true
    alexa:
      name: "Notify Alexa"
      description: "Enable to receive notification on Alexa"
      default: false
      selector:
        boolean:
    notify_alexa:
      name: Speaker for notify Alexa
      default: false
      description: "Insert at least one media_player.\n 
                    **IMPORTANT** If Alexa not integrated set the *notify alexa* button to off"
      selector:
        entity:
          domain: media_player
          multiple: true

mode: restart
variables:
  light: !input light
  porta: !input door
  tts: !input tts
  push: !input push
  alexa: !input alexa
trigger:
  - platform: state
    entity_id: !input door
    from: "off"
    to: "on"
  - platform: state
    entity_id: !input door
    from: "off"
    to: "on"
    for:
      seconds: !input time_door
    id: open
action:
  - alias: Avviso porta aperta
    if:
      - condition: trigger
        id: open
    then:
      - parallel:
        - if:
            - "{{ alexa == true }}"
          then:
            - service: notify.alexa_media
              data:
                target: !input notify_alexa
                data:
                  type: announce
                  method: spoken
                message: !input text_notify  
        - if:
            - "{{ push == true }}"
          then:
            - domain: mobile_app
              type: notify
              device_id: !input notify_device
              title: Door Open
              message: !input text_notify
        - if:
            - "{{ tts == true }}"
          then:
            - service: tts.google_translate_say
              data:
                message: !input text_notify
                entity_id: !input notify_tts
  - alias: Accensione luce per apertura porta
    if:
      - "{{trigger.entity_id == porta and is_state(light,'off')}}"
      - alias: Dopo tramonto
        condition: state
        entity_id: sun.sun
        state: below_horizon
    then:
      - alias: Accendi luce
        service: homeassistant.turn_on
        target:
          entity_id: !input light
      - alias: Attendi
        wait_for_trigger:
          - alias: Porta chiusa per x sec
            platform: state
            entity_id: !input door
            to: "off"
            for:
              seconds: !input light_off
      - alias: Spegni luce
        service: homeassistant.turn_off
        target:
          entity_id: !input light
